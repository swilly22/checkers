var ACTIONS = {INIT : 0, POSSIBLE_MOVES : 1, MOVE : 2, PLAY : 3, WAIT : 4,
                JOIN : 5, QUEENED : 6};

function Server() {    
  this.address = 'ws://127.0.0.1:80/ws';
  this.callbackQueue = [];
  this.connection = null;
  this.Send = Send;
  this.InitWSConnection = InitWSConnection;
  this.RequestPossibleMoves = RequestPossibleMoves;
  this.UpdatePiecePosition = UpdatePiecePosition;
  this.ActionHandler = ActionHandler;
}

function ActionHandler(data) {
  switch(data.action) {
    case ACTIONS.MOVE:
      var checker = board.checkers[data.src.x][data.src.y];
      if(checker == null) {
        console.log("Error, missing piece");
        return;
      }

      board.MoveChecker(data.src, data.dest);
      break;

    case ACTIONS.PLAY:
      console.log("your turn");
      bMyTurn = true;
      break;

    case ACTIONS.WAIT:
      console.log("waiting for other player to make his move.");
      bMyTurn = false;
      break;

    case ACTIONS.QUEENED:
      console.log("queened");
      var piece = board.checkers[data.position.x][data.position.y];
      if(piece == null) {
        console.log("Error, piece missing, probebly out of sync.");
        // TODO Request board.
        break;
      }
      var color = piece.color;
      board.RemoveChecker(data.position);
      board.AddChecker("Queen", data.position, color);

    default:
      console.log("Unknow action " + data.action);
      break;
  }
}

// Sends a request over websocket.
function Send(request, callback) {
  
  if(callback != null) {
    this.callbackQueue.push(callback);
  }

  this.connection.send(JSON.stringify(request));
}

function InitWSConnection() {
  this.connection = new WebSocket(this.address);
  var me = this;
  
  this.connection.onopen = function() {
   /*Send a small message to the console once the connection is established */
   console.log('Connection open!');
   game.JoinGame();
   
   //connection.send('Join');
  }

  this.connection.onclose = function() {
   console.log('Connection closed');
  }

  this.connection.onerror = function(error) {
   console.log('Error detected: ' + error);
  }

  this.connection.onmessage = function(e) {
    var server_message = e.data;
    console.log(server_message);

    var data = JSON.parse(e.data);
    if('fromServer' in data) {
      // This is a message generated by the server, no callback is set for it.
      action = data.action;
      return me.ActionHandler(data);
    }
    else {  // This is a response from the server to one of our requests.
      // Pop callback from queue.
      var callback = me.callbackQueue.shift();
      callback(data);
    }
  }
}

function RequestPossibleMoves(position, callback) {
  var request = {"action" : ACTIONS.POSSIBLE_MOVES, "piece_position" : position };
  this.Send(request, callback);
}

function UpdatePiecePosition(from, to, callback) {
  var request = {'action' : ACTIONS.MOVE, "from" : from, "to" : to};
  this.Send(request, callback);
}